
List of basic QENTANGLE library functions and their usage
---------------------------------------------------------

Quantum Gates
These functions return common quantum gates as NumPy arrays.

I() – Identity Gate
Returns the Identity matrix, which has no effect on a qubit.


print(I())  # Outputs [[1, 0], [0, 1]]
H() – Hadamard Gate
Creates superposition, mapping |0⟩ → (|0⟩ + |1⟩)/√2.


print(H())  # Outputs the Hadamard matrix
X() – Pauli-X (NOT) Gate
Flips |0⟩ to |1⟩ and vice versa.


print(X())  # Outputs the Pauli-X matrix
CNOT() – Controlled-NOT Gate
Flips the target qubit only if the control qubit is |1⟩.


print(CNOT())  # Outputs the CNOT gate matrix
Quantum Circuit Class
The QuantumCircuit class allows users to create and manipulate quantum circuits.

1. Create a Quantum Circuit

qc = QuantumCircuit(2)  # Create a 2-qubit circuit
2. Apply a Quantum Gate

qc.apply_gate(H, 0)  # Apply Hadamard gate to qubit 0
3. Apply a CNOT Gate

qc.cnot(0, 1)  # Apply CNOT with qubit 0 as control and qubit 1 as target
4. Create a Bell Pair
Creates an entangled Bell state: (|00⟩ + |11⟩) / √2


qc.create_bell_pair()
qc.simulate()
5. Create a GHZ State
Creates a multi-qubit entangled state: (|000⟩ + |111⟩) / √2


qc2 = QuantumCircuit(3)
qc2.create_ghz_state()
qc2.simulate()
6. Draw the Circuit
Displays the sequence of gates applied.


qc.draw()
7. Simulate the Circuit
Prints the probability distribution of quantum states.


qc.simulate()

-----
GET STARTED GUIDE
Be sure to "pip install qentangle" in your environment before you begin
After initiating python:
from entangled import *
2. Using Quantum Gates
These functions return the corresponding matrix representation.

Identity Gate (I())
 
print(I())
# Output:
# [[1 0]
#  [0 1]]
Hadamard Gate (H())
 
print(H())
# Output:
# [[ 0.707  0.707]
#  [ 0.707 -0.707]]
Pauli-X Gate (X())
 
print(X())
# Output:
# [[0 1]
#  [1 0]]
CNOT Gate (CNOT())
 
print(CNOT())
# Output:
# [[1 0 0 0]
#  [0 1 0 0]
#  [0 0 0 1]
#  [0 0 1 0]]
3. Creating and Manipulating Quantum Circuits
To create a circuit with 2 qubits:
 
qc = QuantumCircuit(2)
Applying a Hadamard Gate
Apply a Hadamard gate to qubit 0:
 
qc.apply_gate(H, 0)
qc.draw()
Output:
 
Applied H to qubit 0
Applying a CNOT Gate
Apply a CNOT gate with qubit 0 as control and qubit 1 as target:
 
qc.cnot(0, 1)
qc.draw()
Output:
 
Applied H to qubit 0
Applied CNOT between qubit 0 and qubit 1
4. Creating Entangled States
Creating a Bell Pair
Bell pair: (|00⟩ + |11⟩) / √2
 
qc = QuantumCircuit(2)
qc.create_bell_pair()
qc.simulate()
Output (Example Probabilities):
 
Applied H to qubit 0
Applied CNOT between qubit 0 and qubit 1
State |00> : 0.50
State |11> : 0.50
Creating a GHZ State
GHZ state: (|000⟩ + |111⟩) / √2
 
qc3 = QuantumCircuit(3)
qc3.create_ghz_state()
qc3.simulate()
Output (Example Probabilities):
 
Applied H to qubit 0
Applied CNOT between qubit 0 and qubit 1
Applied CNOT between qubit 1 and qubit 2
State |000> : 0.50
State |111> : 0.50
5. Simulating Quantum Circuits
To see the final probability distribution:
 
qc.simulate()
Example Output:
 
State |00> : 0.50
State |11> : 0.50
6. Running the Script from the Command Line
You can go to the github and download the main library file, and run the entire library as a standalone script to see entanglement in action:
 

Create a Bell pair for 2 qubits.
Create a GHZ state for 3 qubits.
Display the applied gates and final quantum state probabilities.
These examples should get you started with QENTANGLE! 
